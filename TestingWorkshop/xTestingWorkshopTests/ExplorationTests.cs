using FluentAssertions;
using System;
using System.Collections.Generic;
using System.Linq;
using TestingWorkshop;
using TestingWorkshop.Extensions;
using TestingWorkshop.Models;
using TestingWorkshop.Services;
using Xunit;

namespace xTestingWorkshopTests
{
    public class ExplorationTests
    {
        Solution _solutionImpl = null;
        static readonly string[] _testSet1 = new string[] { "18:32:46", "18:36:24", "18:36:42", "18:34:26", "18:23:46", "18:26:34", "18:26:43", "18:24:36", "18:43:26", "18:42:36", "18:46:32", "18:46:23", "13:28:46", "13:26:48", "13:48:26", "13:46:28", "12:38:46", "12:36:48", "12:48:36", "12:46:38", "16:38:24", "16:38:42", "16:32:48", "16:34:28", "16:28:34", "16:28:43", "16:23:48", "16:24:38", "16:48:32", "16:48:23", "16:43:28", "16:42:38", "14:38:26", "14:36:28", "14:28:36", "14:26:38", "21:38:46", "21:36:48", "21:48:36", "21:46:38", "23:18:46", "23:16:48", "23:48:16", "23:46:18", "24:18:36", "24:16:38", "24:38:16", "24:36:18" };

        public ExplorationTests()
        {
            var processor = new HourProcessor();
            _solutionImpl = new Solution(processor);

            //_testSet1 = new string[] { "18:32:46", "18:36:24", "18:36:42", "18:34:26", "18:23:46", "18:26:34", "18:26:43", "18:24:36", "18:43:26", "18:42:36", "18:46:32", "18:46:23", "13:28:46", "13:26:48", "13:48:26", "13:46:28", "12:38:46", "12:36:48", "12:48:36", "12:46:38", "16:38:24", "16:38:42", "16:32:48", "16:34:28", "16:28:34", "16:28:43", "16:23:48", "16:24:38", "16:48:32", "16:48:23", "16:43:28", "16:42:38", "14:38:26", "14:36:28", "14:28:36", "14:26:38", "21:38:46", "21:36:48", "21:48:36", "21:46:38", "23:18:46", "23:16:48", "23:48:16", "23:46:18", "24:18:36", "24:16:38", "24:38:16", "24:36:18" };
        }

        [Theory]
        [InlineData(1, 8, 3, 2, 6, 4, "12:36:48")]
        [InlineData(4, 4, 4, 4, 4, 4, "NOT POSSIBLE")]
        [InlineData(1, 9, 3, 5, 6, 8, "16:38:59")]
        [InlineData(4, 4, 3, 9, 6, 2, "23:46:49")]
        [InlineData(0, 2, 1, 3, 1, 2, "01:12:23")]
        [InlineData(1, 8, 0, 2, 0, 4, "00:12:48")]
        public void SolutionExplorationTest(int A, int B, int C, int D, int E, int F, string expectedValue)
        {
            var result = _solutionImpl.solution(A, B, C, D, E, F);

            result.Should().Be(expectedValue);
        }

        [Theory]
        [InlineData(new int[] { 1, 8, 3, 2, 6, 4 }, new string[] { "18:34:26", "18:23:46", "18:32:46", "18:36:24", "18:36:42", "18:26:34", "18:26:43", "18:24:36", "18:43:26", "18:42:36", "18:46:32", "18:46:23", "13:28:46", "13:26:48", "13:48:26", "13:46:28", "12:38:46", "12:36:48", "12:48:36", "12:46:38", "16:38:24", "16:38:42", "16:32:48", "16:34:28", "16:28:34", "16:28:43", "16:23:48", "16:24:38", "16:48:32", "16:48:23", "16:43:28", "16:42:38", "14:38:26", "14:36:28", "14:28:36", "14:26:38", "21:38:46", "21:36:48", "21:48:36", "21:46:38", "23:18:46", "23:16:48", "23:48:16", "23:46:18", "24:18:36", "24:16:38", "24:38:16", "24:36:18" })]
        [InlineData(new int[] { 2, 6, 4, 1, 8, 3 }, new string[] { "18:34:26", "18:23:46", "18:32:46", "18:36:24", "18:36:42", "18:26:34", "18:26:43", "18:24:36", "18:43:26", "18:42:36", "18:46:32", "18:46:23", "13:28:46", "13:26:48", "13:48:26", "13:46:28", "12:38:46", "12:36:48", "12:48:36", "12:46:38", "16:38:24", "16:38:42", "16:32:48", "16:34:28", "16:28:34", "16:28:43", "16:23:48", "16:24:38", "16:48:32", "16:48:23", "16:43:28", "16:42:38", "14:38:26", "14:36:28", "14:28:36", "14:26:38", "21:38:46", "21:36:48", "21:48:36", "21:46:38", "23:18:46", "23:16:48", "23:48:16", "23:46:18", "24:18:36", "24:16:38", "24:38:16", "24:36:18" })]
        public void GetAllPossibleHours_GetsAStandardSet_ReturnsAllPossibleHours(int[] digits, string[] allCombinations)
        {
            var result = _solutionImpl.GetAllPossibleHours(digits.ToList());

            result.Select(h => h.To24HourFormatString())
                .Should()
                .BeEquivalentTo(allCombinations.ToList());
        }

        
    }
}
